
// ----------------------------------------------------------------------------

const bind   = require('./bind.node'),
			stream = require('stream'),
			util   = require('util');
			
// ----------------------------------------------------------------------------

function serial(port, options) {
	const self = this;

	self.input;
	self.pointer = 0;
	self.bind = false;

	bind.open(port, options, (err, fd) => {
		if (err) {
			return console.error(err);
		}

		self.bind = fd;
		self.emit('readable');
		self._read();
	});

	stream.Duplex.call(self);
}

util.inherits(serial, stream.Duplex);

serial.prototype._read = function _read(rsize) {
	const self = this;

	if ( rsize > 0 ) {
		self.input = Buffer.from(Array(rsize));
		return;
	}

	bind.read(self.bind, self.input, 0, self.input.length,
		(err) => {
			if (err) {
				console.error(err);
			} else {
				let data = Buffer.from(Array(self.input.length));
				self.input.copy(data, 0, 0, self.input.length);
				self.emit('data', data);
			}

			self.input.fill(0);
			self._read();
		});
}

serial.prototype._write = function _write(chunk, enc, cb) {
	const self = this;

	bind.write(self.bind, chunk, (err) => {
		if (err) {
			return console.error(err);
		}

		cb();
	});
}

module.exports = serial;